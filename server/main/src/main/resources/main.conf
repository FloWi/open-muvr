logging {
  level = INFO

  # Log dead letters
  dead-letters = on

  # Log all LoggingFSMs for events, transitions and timers (using akka.actor.LoggingFSM[StateType, Data])
  fsm = on

  # Logging of message invocations on certain (local) actors (using akka.event.LoggingReceive)
  receive = on

  # Log unhandled actor messages
  unhandled = on

  # Log cluster informational messages
  cluster = on

  # Log all inbound and outbound messages to remote actors
  remote = on
}

akka {
  loglevel = ${logging.level}
  log-dead-letters = ${logging.dead-letters}

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      fsm = ${logging.fsm}
      receive = ${logging.receive}
      unhandled = ${logging.unhandled}
    }
  }

  remote {
    log-remote-lifecycle-events = off
    log-sent-messages = ${logging.remote}
    log-received-messages = ${logging.remote}
    log-remote-lifecycle-events = ${logging.remote}
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    log-info = ${logging.cluster}
    seed-nodes = [
      "akka.tcp://Lift@127.0.0.1:2551",
      "akka.tcp://Lift@127.0.0.1:2552"
    ]

    auto-down-unreachable-after = 10s
  }

  persistence {
    journal.plugin = "akka.persistence.journal.leveldb-shared"
    journal.leveldb-shared.store {
      # DO NOT USE 'native = off' IN PRODUCTION !!!
      native = off
      dir = "target/shared-journal"
    }
    snapshot-store.local.dir = "target/snapshots"
  }
}

kafka {
  producer {
    message.send.max.retries = 3
    metadata.broker.list = "127.0.0.1:9092"
    connect.timeout.ms = 500
    producer.type = "async"
    topic = "test"
  }
}
