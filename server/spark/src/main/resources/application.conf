logging {
  level = INFO

  # Log dead letters
  dead-letters = on

  # Log all LoggingFSMs for events, transitions and timers (using akka.actor.LoggingFSM[StateType, Data])
  fsm = on

  # Logging of message invocations on certain (local) actors (using akka.event.LoggingReceive)
  receive = on

  # Log unhandled actor messages
  unhandled = on

  # Log cluster informational messages
  cluster = on

  # Log all inbound and outbound messages to remote actors
  remote = off
}

akka {
  loglevel = ${logging.level}
  log-dead-letters = ${logging.dead-letters}

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
    }

    serialization-bindings {
      #"com.eigengo.lift.spark.serialization.Serialization$UserRegistered" = kryo
      "com.eigengo.lift.exercise.UserExercises$ExerciseEvt" = java
      "com.eigengo.lift.profile.UserProfile$UserRegistered" = java

      #"com.eigengo.lift.spark.serialization.Serialization$ClassifyExerciseEvt" = kryo
      #"com.eigengo.lift.spark.serialization.Serialization$SessionStartedEvt" = kryo
      #"com.eigengo.lift.spark.serialization.Serialization$SessionAbandonedEvt" = kryo
      #"com.eigengo.lift.spark.serialization.Serialization$SessionDeletedEvt" = kryo
      #"com.eigengo.lift.spark.serialization.Serialization$SessionEndedEvt" = kryo
      #"com.eigengo.lift.spark.serialization.Serialization$ExerciseSetExplicitMarkEvt" = kryo
      #"com.eigengo.lift.spark.serialization.Serialization$NoExerciseEvt" = kryo
      #"com.eigengo.lift.spark.serialization.Serialization$ExerciseSetExerciseMetricEvt" = kryo
    }
  }
}

cassandra {
  host = ${?CASSANDRA_HOST}
}

spark {
  master = "spark://"${?SPARK_MASTER_HOST}":"${?SPARK_MASTER_PORT}
}

jobs {
  suggestions {
    interval = 3m
  }
}

app {
  rest {
    api = ${?APP_REST_API}
    port = ${?APP_REST_PORT}
  }
}